;; all.el
(defun bake(i j)
(setq bap i)
(setq bastring "")
(while (< bap (+ 1 j))
   (setq bastring (concat bastring (byte-to-string (get-byte bap))))
   (setq bap (+ 1 bap))
   )
bastring)


(defun fill (str)
	(setq stringlist (split-string str)))
	
(defun store(i j linewidth)
	(setq itera 0)
	(setq str (bake i j ))
	(setq storelist (fill str)) 
	(setq iterb (length storelist))
	(setq listlen '(-1))
	(setq liststretch '(-1))
	(setq len -1)
	(while (< itera iterb)
		(setq len (+ len (length (elt storelist itera))))	  
		(setq len (+ 1 len))
		(push len listlen )
		(push itera liststretch)
		(setq itera (+ 1 itera))
	)
	(setq listlen (reverse listlen))
	(setq liststretch (reverse liststretch))
)

;; boom.el

(defun givehyphenpoints (hystr)
	(hyphenate hystr)
	(setq kii 3)
	(setq kij (+ 1 (length hystr)))
	(if (<= (length hystr) 4)  (setq kij 0 ))
	(setq klist '())
	(while (< kii kij)
		(if (= 1 (mod (elt hypoint kii) 2 ))
			(push (- kii 2) klist))
		(setq kii (+ 1 kii)))
	(setq klist (reverse klist))
	klist
)

;; here x and y represent stretch available and spaces to put. (penalty 5 3) = 3 and penalty(3,5)= 23 
(defun penalty (x y)
	(let ((ans 0))
	(if (>= x y) (setq ans y))
	(if (< x y) (setq ans (+ x (* 10 (- y x)))))
	ans))		
 
;; dp.el
(defun filldp(i j linewidth)
	(store i j linewidth)
	(setq dplen (length storelist))
	(setq dpii 0)
 	(while (< dpii dplen)
		(setq dpstr (elt storelist dpii)) 
		(setq dpl (givehyphenpoints dpstr))
		(setq dpjj 0)
		(while (< dpjj (length dpl))
			(aset (elt dpb (+ 1 dpii)) (elt dpl dpjj) 1)
			(setq dpjj (+ 1 dpjj)))
		(aset (elt dpb (+ 1 dpii)) (- (length dpstr) 1) 1)
		(setq dpii (+ 1 dpii)))
	(aset (elt dpb 0) 0 1)	
	(setq dpjj dplen)
	(while (>= dpjj 0)
		(if (= dpjj 0) (setq dplenj 1)
					   (setq dplenj (length (elt storelist (- dpjj 1))))  )
		(setq dpkk 0)
		(while (< dpkk dplenj)
			(if (= (elt (elt dpb dpjj) dpkk) 1)
				(progn
					(setq dpextra (- dplenj (+ 1 dpkk)))
					(setq dpstretch 0) 
					(if (= dpextra 0) (progn
										(setq dpextra -1) (setq dpstretch -1))) 
					(setq dpextralinestart dpextra)
					(setq dpstretchlinestart dpstretch)
					(setq dptemp ( - (elt listlen dplen) (+ (elt listlen (- dpjj 1)) (+ dpkk 2))))
					(if (= dpkk (- dplenj 1)) (setq dptemp (- dptemp 1)))
					(setq dpxx (+ 1 dpjj))
					(setq dpmin 100000)(setq dpindex dplen)
					(while(and (<= dpxx dplen) (<= dpextra linewidth))
						(setq dplenx (length (elt storelist (- dpxx 1))))
						(setq dpxk 0)
						(while (< dpxk dplenx)
							(if (= (elt (elt dpb dpxx) dpxk) 1)
								(progn
									(if(= dpxk (- dplenx 1))
									(progn
										(setq dpextra (+ dpextralinestart (+ dpxk 2)))
										(setq dpextralinestart dpextra)
										(setq dpstretch (+ 1 dpstretchlinestart))
										(setq dpstretchlinestart dpstretch))
									(progn 
										(setq dpextra (+ dpextralinestart (+ dpxk 3)))	
										(setq dpstretch (+ 1 dpstretch)))
									)
									(if  (<= dpextra linewidth)
										(progn
										(setq dptotal (+ (elt (elt dpa dpxx) dpxk) (penalty dpstretch (- linewidth dpextra)))	)
										(if (<= dptotal dpmin)
											(progn
												(setq dpmin dptotal)
												(setq dpindex dpxx)
												(setq dpindexbreakpoint dpxk))) 
										)
									)
									
													
								))
							(setq dpxk (+ 1 dpxk))
						)
						(setq dpxx (+ 1 dpxx))
					)
					(if (<= dptemp linewidth)
					(progn
						(setq dpmin 0)
						(setq dpindex dplen)
						(setq dpindexbreakpoint (- (length (elt storelist (- dplen 1))) 1 ))
					))
					(aset (elt dpa dpjj) dpkk dpmin)
					(aset (elt dpc dpjj) dpkk dpindex)
					(aset (elt dpd dpjj) dpkk dpindexbreakpoint))
			)		
			(setq dpkk (+ 1 dpkk))
		)
		(setq dpjj (- dpjj 1))
	)	
)		 

;; putnewline.el
(defun putnewline (i j linewidth)
	
	(loadinit)
	(setdpb)
	(filldp i j linewidth)
	(setq puti 0)
	(setq putj 0)
	(setq putstr "")
	(setq putimax (length storelist));; 29
	(setq putjmax (- (length (elt storelist (- putimax 1))) 1)) ;; 6
	(while (not (and (= puti putimax) (= putj putjmax)))
		(setq putiend (elt (elt dpc puti) putj)) 
		(setq putjend (elt (elt dpd puti) putj))
		(setq putnosp (- (elt (elt dpa puti) putj) (elt (elt dpa putiend) putjend)))
		(setq putspi 0)
		(if (and (not (= puti 0)) (not (= (+ 1 putj) (length (elt storelist (- puti 1))))))
		(progn (setq putstr (concat putstr (substring (elt storelist (- puti 1)) (+ 1 putj) (length (elt storelist (- puti 1))))))
		       (setq putstr (concat putstr " "))
		       (if (< putspi putnosp) (progn (setq putspi (+ 1 putspi)) (setq putstr (concat putstr " "))))
		))
		(setq puti (+ puti 1))
		(while  (< puti putiend)
			(setq putstr (concat putstr (elt storelist (- puti 1))))
			(setq putstr (concat putstr " "))
        	(if (< putspi putnosp) (progn (setq putspi (+ 1 putspi)) (setq putstr (concat putstr " "))))
			(setq puti (+ 1 puti)))
		(if (and (<= puti putimax) (not (= puti 0)))
			(setq putstr (concat putstr (substring (elt storelist (- puti 1)) 0 (+ 1 putjend)))))
		(if (and (<= puti putimax) (not (= (+ 1 putjend) (length (elt storelist (- puti 1))))))
			(setq  putstr (concat putstr "-")))
		(setq putstr (concat putstr "\n"))
		(setq puti putiend)(setq putj putjend)
	)
	
	putstr
)

;; runoverpara.el
(defun runoverpara (i j linewidth)
	(print (current-time-string))
	(setq runtempi i)
	(setq runenter 0)
	(setq runinit i)
	(setq finalstring "")
	(while (<= i j)
		(if (= (get-byte i) 10)
			(progn
				(if (= runenter 0) (progn (setq runenter 1)(setq i (+ 1 i)))
								(if (= runenter 1) (progn
												(setq finalstring (concat finalstring (putnewline runinit (- i 2) linewidth)))
												(setq finalstring (concat finalstring "\n"))
												(setq runk (+ 1 i))
												(while (= (get-byte runk) 10)
													(setq runk (+ 1 runk)))
												(setq runinit runk)
												(setq i runk))))
			)
			(progn (setq runenter 0)(setq i (+ 1 i)))
		)
	)
	(if (< runinit j) (progn (setq finalstring (concat finalstring (putnewline runinit j linewidth))) 
							 ))
	(print (current-time-string))
	(replace-string (bake runtempi j) finalstring nil runtempi (+ 1 j))
	(setq temp "endoffile")
)

;; setdpb.el
(defun setdpb()
	(let ((ii 0) (jj 0))
	(while (< ii 200)
		(setq jj 0)
		(while (< jj 15)
			(aset (elt dpb ii) jj 0)
			(setq jj (+ 1 jj))
		)
		(setq ii (+ 1 ii))
	))
) 
	

